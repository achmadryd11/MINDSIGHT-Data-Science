# -*- coding: utf-8 -*-
"""Clasification for Human Resource Promotion

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18u5xmhsaEkeRQseZP1nUrFFxcvS7oNhk
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

from google.colab import drive
drive.mount('/content/drive')

df = pd.read_csv('/content/drive/MyDrive/Dataset/data_train_dqlab.csv')
df.sample(10)

"""**MEMBACA DAN MEMAHAMI DATA**"""

df.describe()

df.info()

df.department.unique()

def histogram(value):
  plt.figure(figsize=(8,5))
  sns.histplot(value)
  plt.xticks(rotation=90)
  plt.show()

"""**Mengkasifikasi data dengan plot**"""

histogram(df.department)

histogram(df.region)

histogram(df.education)

histogram(df.is_promoted)

df['gender'].value_counts()

size = [38496, 16312]
labels = "Male", "Female"
colors = ['grey', 'red']
explode = [0, 0.1]

plt.subplots(figsize=(5,5))
plt.pie(size, labels = labels, colors = colors, explode = explode, shadow = True, autopct = "%.2f%%")
plt.title('Pie Chart For Gender', fontsize = 40)
plt.axis('off')
plt.legend()
plt.show()

size = [30446, 23220, 1142]
labels = "Others", "Sourcing", "Reffered"
colors = ['green', 'cyan', 'yellow']
explode = [0, 0.1]

plt.subplots(figsize=(5,5))
plt.pie(size, colors = colors, labels = labels, shadow = True, autopct = '%.2f%%')
plt.title('Pie Chart For Different Recruitment Channel', fontsize = 40)
plt.axis('off')
plt.legend()
plt.show()

df.region.unique()

df.recruitment_channel.unique()

df.isna().sum()

df.shape

df = df.dropna()
print(df.shape)

df.info()

data_y = df['is_promoted']
print(data_y)

data_x = df.drop(['is_promoted'], axis=1)
data_x.columns

from sklearn.preprocessing import LabelEncoder

work_features = data_x.columns[data_x.dtypes == object]
#label encoding
for a in work_features:
  label = LabelEncoder()
  label.fit(list(data_x[a].values))
  data_x[a] = label.transform(list(data_x[a].values))

data_x.head()

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(data_x, data_y, test_size=0.3)

X_train.head()

y_train.head()



"""**Decision Tree**

"""

#membuat model Decision Tree
from sklearn.tree import DecisionTreeClassifier
Tree = DecisionTreeClassifier(criterion='entropy', max_depth=4)

Tree.fit(X_train, y_train)

#menentukan ciri atau aspek paling penting
importances = pd.DataFrame({"feature": X_train.columns, "importance": Tree.feature_importances_})
importances.sort_values("importance", ascending=False)[:10]

import seaborn as sns
sns.barplot(data=importances.sort_values("importance", ascending=False).head(8), x="importance", y="feature")

data = pd.crosstab(df['engagement_score'], df['is_promoted'])
data.div(data.sum(1).astype(float), axis = 0).plot(kind = 'bar',stacked=True, figsize = (10, 5), color = ['blue', 'red'])

plt.title('Impact from Engagement_Score to promotion', fontsize = 20)
plt.legend()
plt.show()

data = pd.crosstab(df['satisfaction_score'], df['is_promoted'])
data.div(data.sum(1).astype(float), axis = 0).plot(kind = 'bar',stacked=True, figsize = (10, 9), color = ['blue', 'red'])

plt.title('Impact from satisfaction_score to promotion', fontsize = 20)
plt.legend()
plt.show()

data = pd.crosstab(df['awards_won?'], df['is_promoted'])
data.div(data.sum(1).astype(float), axis = 0).plot(kind = 'bar',stacked=True, figsize = (10, 5), color = ['blue', 'red'])

plt.title('Impact From awards won to promotion', fontsize = 20)
plt.legend()
plt.show()

"""**Disimpulkan bawhwa Engagement Score dari karyawan berdampak besar pada promotion**"""

#akurasi proses decision tree
from sklearn.metrics import accuracy_score
from sklearn.metrics import confusion_matrix, classification_report
y_pred = Tree.predict(X_test)
print("DecisionTrees's Accuracy: ", accuracy_score(y_test, y_pred))

sns.heatmap(confusion_matrix(y_test, y_pred),annot=True,fmt='2.0f')

print(classification_report(y_test,y_pred))

